'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :4.0.30319.18063
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Wdr_Tests")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Définitions de méthodes d'extensibilité"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCouleurs(instance As Couleurs)
    End Sub
  Partial Private Sub UpdateCouleurs(instance As Couleurs)
    End Sub
  Partial Private Sub DeleteCouleurs(instance As Couleurs)
    End Sub
  Partial Private Sub InsertVoitures(instance As Voitures)
    End Sub
  Partial Private Sub UpdateVoitures(instance As Voitures)
    End Sub
  Partial Private Sub DeleteVoitures(instance As Voitures)
    End Sub
  Partial Private Sub InsertMarques(instance As Marques)
    End Sub
  Partial Private Sub UpdateMarques(instance As Marques)
    End Sub
  Partial Private Sub DeleteMarques(instance As Marques)
    End Sub
  Partial Private Sub InsertModeles(instance As Modeles)
    End Sub
  Partial Private Sub UpdateModeles(instance As Modeles)
    End Sub
  Partial Private Sub DeleteModeles(instance As Modeles)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.wdr_test_datalayer.My.MySettings.Default.Wdr_TestsConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Couleurs() As System.Data.Linq.Table(Of Couleurs)
		Get
			Return Me.GetTable(Of Couleurs)
		End Get
	End Property
	
	Public ReadOnly Property Voitures() As System.Data.Linq.Table(Of Voitures)
		Get
			Return Me.GetTable(Of Voitures)
		End Get
	End Property
	
	Public ReadOnly Property Marques() As System.Data.Linq.Table(Of Marques)
		Get
			Return Me.GetTable(Of Marques)
		End Get
	End Property
	
	Public ReadOnly Property Modeles() As System.Data.Linq.Table(Of Modeles)
		Get
			Return Me.GetTable(Of Modeles)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Couleurs")>  _
Partial Public Class Couleurs
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _co_id As System.Guid
	
	Private _co_lib As String
	
	Private _Voitures As EntitySet(Of Voitures)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onco_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub Onco_idChanged()
    End Sub
    Partial Private Sub Onco_libChanging(value As String)
    End Sub
    Partial Private Sub Onco_libChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Voitures = New EntitySet(Of Voitures)(AddressOf Me.attach_Voitures, AddressOf Me.detach_Voitures)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_co_id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property co_id() As System.Guid
		Get
			Return Me._co_id
		End Get
		Set
			If ((Me._co_id = value)  _
						= false) Then
				Me.Onco_idChanging(value)
				Me.SendPropertyChanging
				Me._co_id = value
				Me.SendPropertyChanged("co_id")
				Me.Onco_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_co_lib", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property co_lib() As String
		Get
			Return Me._co_lib
		End Get
		Set
			If (String.Equals(Me._co_lib, value) = false) Then
				Me.Onco_libChanging(value)
				Me.SendPropertyChanging
				Me._co_lib = value
				Me.SendPropertyChanged("co_lib")
				Me.Onco_libChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Couleurs_Voitures", Storage:="_Voitures", ThisKey:="co_id", OtherKey:="vo_co_id")>  _
	Public Property Voitures() As EntitySet(Of Voitures)
		Get
			Return Me._Voitures
		End Get
		Set
			Me._Voitures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Voitures(ByVal entity As Voitures)
		Me.SendPropertyChanging
		entity.Couleurs = Me
	End Sub
	
	Private Sub detach_Voitures(ByVal entity As Voitures)
		Me.SendPropertyChanging
		entity.Couleurs = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Voitures")>  _
Partial Public Class Voitures
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _vo_id As System.Guid
	
	Private _vo_km As Integer
	
	Private _vo_immat As String
	
	Private _vo_co_id As System.Guid
	
	Private _vo_mo_id As System.Guid
	
	Private _Couleurs As EntityRef(Of Couleurs)
	
	Private _Modeles As EntityRef(Of Modeles)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onvo_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub Onvo_idChanged()
    End Sub
    Partial Private Sub Onvo_kmChanging(value As Integer)
    End Sub
    Partial Private Sub Onvo_kmChanged()
    End Sub
    Partial Private Sub Onvo_immatChanging(value As String)
    End Sub
    Partial Private Sub Onvo_immatChanged()
    End Sub
    Partial Private Sub Onvo_co_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub Onvo_co_idChanged()
    End Sub
    Partial Private Sub Onvo_mo_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub Onvo_mo_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Couleurs = CType(Nothing, EntityRef(Of Couleurs))
		Me._Modeles = CType(Nothing, EntityRef(Of Modeles))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vo_id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property vo_id() As System.Guid
		Get
			Return Me._vo_id
		End Get
		Set
			If ((Me._vo_id = value)  _
						= false) Then
				Me.Onvo_idChanging(value)
				Me.SendPropertyChanging
				Me._vo_id = value
				Me.SendPropertyChanged("vo_id")
				Me.Onvo_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vo_km", DbType:="Int NOT NULL")>  _
	Public Property vo_km() As Integer
		Get
			Return Me._vo_km
		End Get
		Set
			If ((Me._vo_km = value)  _
						= false) Then
				Me.Onvo_kmChanging(value)
				Me.SendPropertyChanging
				Me._vo_km = value
				Me.SendPropertyChanged("vo_km")
				Me.Onvo_kmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vo_immat", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property vo_immat() As String
		Get
			Return Me._vo_immat
		End Get
		Set
			If (String.Equals(Me._vo_immat, value) = false) Then
				Me.Onvo_immatChanging(value)
				Me.SendPropertyChanging
				Me._vo_immat = value
				Me.SendPropertyChanged("vo_immat")
				Me.Onvo_immatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vo_co_id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property vo_co_id() As System.Guid
		Get
			Return Me._vo_co_id
		End Get
		Set
			If ((Me._vo_co_id = value)  _
						= false) Then
				If Me._Couleurs.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onvo_co_idChanging(value)
				Me.SendPropertyChanging
				Me._vo_co_id = value
				Me.SendPropertyChanged("vo_co_id")
				Me.Onvo_co_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vo_mo_id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property vo_mo_id() As System.Guid
		Get
			Return Me._vo_mo_id
		End Get
		Set
			If ((Me._vo_mo_id = value)  _
						= false) Then
				If Me._Modeles.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onvo_mo_idChanging(value)
				Me.SendPropertyChanging
				Me._vo_mo_id = value
				Me.SendPropertyChanged("vo_mo_id")
				Me.Onvo_mo_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Couleurs_Voitures", Storage:="_Couleurs", ThisKey:="vo_co_id", OtherKey:="co_id", IsForeignKey:=true)>  _
	Public Property Couleurs() As Couleurs
		Get
			Return Me._Couleurs.Entity
		End Get
		Set
			Dim previousValue As Couleurs = Me._Couleurs.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Couleurs.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Couleurs.Entity = Nothing
					previousValue.Voitures.Remove(Me)
				End If
				Me._Couleurs.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Voitures.Add(Me)
					Me._vo_co_id = value.co_id
				Else
					Me._vo_co_id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Couleurs")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Modeles_Voitures", Storage:="_Modeles", ThisKey:="vo_mo_id", OtherKey:="mo_id", IsForeignKey:=true)>  _
	Public Property Modeles() As Modeles
		Get
			Return Me._Modeles.Entity
		End Get
		Set
			Dim previousValue As Modeles = Me._Modeles.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Modeles.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Modeles.Entity = Nothing
					previousValue.Voitures.Remove(Me)
				End If
				Me._Modeles.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Voitures.Add(Me)
					Me._vo_mo_id = value.mo_id
				Else
					Me._vo_mo_id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Modeles")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Marques")>  _
Partial Public Class Marques
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ma_id As System.Guid
	
	Private _ma_lib As String
	
	Private _Modeles As EntitySet(Of Modeles)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onma_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub Onma_idChanged()
    End Sub
    Partial Private Sub Onma_libChanging(value As String)
    End Sub
    Partial Private Sub Onma_libChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Modeles = New EntitySet(Of Modeles)(AddressOf Me.attach_Modeles, AddressOf Me.detach_Modeles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ma_id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ma_id() As System.Guid
		Get
			Return Me._ma_id
		End Get
		Set
			If ((Me._ma_id = value)  _
						= false) Then
				Me.Onma_idChanging(value)
				Me.SendPropertyChanging
				Me._ma_id = value
				Me.SendPropertyChanged("ma_id")
				Me.Onma_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ma_lib", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ma_lib() As String
		Get
			Return Me._ma_lib
		End Get
		Set
			If (String.Equals(Me._ma_lib, value) = false) Then
				Me.Onma_libChanging(value)
				Me.SendPropertyChanging
				Me._ma_lib = value
				Me.SendPropertyChanged("ma_lib")
				Me.Onma_libChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marques_Modeles", Storage:="_Modeles", ThisKey:="ma_id", OtherKey:="mo_ma_id")>  _
	Public Property Modeles() As EntitySet(Of Modeles)
		Get
			Return Me._Modeles
		End Get
		Set
			Me._Modeles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Modeles(ByVal entity As Modeles)
		Me.SendPropertyChanging
		entity.Marques = Me
	End Sub
	
	Private Sub detach_Modeles(ByVal entity As Modeles)
		Me.SendPropertyChanging
		entity.Marques = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Modeles")>  _
Partial Public Class Modeles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mo_id As System.Guid
	
	Private _mo_lib As String
	
	Private _mo_cheveaux As Integer
	
	Private _mo_portes As Byte
	
	Private _mo_ma_id As System.Guid
	
	Private _Voitures As EntitySet(Of Voitures)
	
	Private _Marques As EntityRef(Of Marques)
	
    #Region "Définitions de méthodes d'extensibilité"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmo_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub Onmo_idChanged()
    End Sub
    Partial Private Sub Onmo_libChanging(value As String)
    End Sub
    Partial Private Sub Onmo_libChanged()
    End Sub
    Partial Private Sub Onmo_cheveauxChanging(value As Integer)
    End Sub
    Partial Private Sub Onmo_cheveauxChanged()
    End Sub
    Partial Private Sub Onmo_portesChanging(value As Byte)
    End Sub
    Partial Private Sub Onmo_portesChanged()
    End Sub
    Partial Private Sub Onmo_ma_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub Onmo_ma_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Voitures = New EntitySet(Of Voitures)(AddressOf Me.attach_Voitures, AddressOf Me.detach_Voitures)
		Me._Marques = CType(Nothing, EntityRef(Of Marques))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mo_id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property mo_id() As System.Guid
		Get
			Return Me._mo_id
		End Get
		Set
			If ((Me._mo_id = value)  _
						= false) Then
				Me.Onmo_idChanging(value)
				Me.SendPropertyChanging
				Me._mo_id = value
				Me.SendPropertyChanged("mo_id")
				Me.Onmo_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mo_lib", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mo_lib() As String
		Get
			Return Me._mo_lib
		End Get
		Set
			If (String.Equals(Me._mo_lib, value) = false) Then
				Me.Onmo_libChanging(value)
				Me.SendPropertyChanging
				Me._mo_lib = value
				Me.SendPropertyChanged("mo_lib")
				Me.Onmo_libChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mo_cheveaux", DbType:="Int NOT NULL")>  _
	Public Property mo_cheveaux() As Integer
		Get
			Return Me._mo_cheveaux
		End Get
		Set
			If ((Me._mo_cheveaux = value)  _
						= false) Then
				Me.Onmo_cheveauxChanging(value)
				Me.SendPropertyChanging
				Me._mo_cheveaux = value
				Me.SendPropertyChanged("mo_cheveaux")
				Me.Onmo_cheveauxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mo_portes", DbType:="TinyInt NOT NULL")>  _
	Public Property mo_portes() As Byte
		Get
			Return Me._mo_portes
		End Get
		Set
			If ((Me._mo_portes = value)  _
						= false) Then
				Me.Onmo_portesChanging(value)
				Me.SendPropertyChanging
				Me._mo_portes = value
				Me.SendPropertyChanged("mo_portes")
				Me.Onmo_portesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mo_ma_id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property mo_ma_id() As System.Guid
		Get
			Return Me._mo_ma_id
		End Get
		Set
			If ((Me._mo_ma_id = value)  _
						= false) Then
				If Me._Marques.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onmo_ma_idChanging(value)
				Me.SendPropertyChanging
				Me._mo_ma_id = value
				Me.SendPropertyChanged("mo_ma_id")
				Me.Onmo_ma_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Modeles_Voitures", Storage:="_Voitures", ThisKey:="mo_id", OtherKey:="vo_mo_id")>  _
	Public Property Voitures() As EntitySet(Of Voitures)
		Get
			Return Me._Voitures
		End Get
		Set
			Me._Voitures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marques_Modeles", Storage:="_Marques", ThisKey:="mo_ma_id", OtherKey:="ma_id", IsForeignKey:=true)>  _
	Public Property Marques() As Marques
		Get
			Return Me._Marques.Entity
		End Get
		Set
			Dim previousValue As Marques = Me._Marques.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Marques.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Marques.Entity = Nothing
					previousValue.Modeles.Remove(Me)
				End If
				Me._Marques.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Modeles.Add(Me)
					Me._mo_ma_id = value.ma_id
				Else
					Me._mo_ma_id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Marques")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Voitures(ByVal entity As Voitures)
		Me.SendPropertyChanging
		entity.Modeles = Me
	End Sub
	
	Private Sub detach_Voitures(ByVal entity As Voitures)
		Me.SendPropertyChanging
		entity.Modeles = Nothing
	End Sub
End Class
